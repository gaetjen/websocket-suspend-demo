package de.johannesgaetjen

import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpRequestFactory
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.annotation.MockBean
import io.micronaut.test.extensions.kotest5.annotation.MicronautTest
import io.micronaut.websocket.CloseReason
import io.micronaut.websocket.WebSocketClient
import io.micronaut.websocket.WebSocketSession
import io.micronaut.websocket.annotation.ClientWebSocket
import io.micronaut.websocket.annotation.OnClose
import io.micronaut.websocket.annotation.OnMessage
import io.micronaut.websocket.annotation.OnOpen
import kotlinx.coroutines.delay
import kotlinx.coroutines.reactive.awaitFirst

@MicronautTest
class SuccessfulOpenTest(
    private val suspendingOnOpenCounter: SuspendingOnOpenCounter,
    private val blockingOnOpenCounter: BlockingOnOpenCounter,
    @Client("/")
    private val webSocketClient: WebSocketClient,
) : StringSpec({



    "opening a websocket should increment the counter - suspending" {
        suspendingOnOpenCounter.count shouldBe 0

        // open a websocket
        webSocketClient.connect(
            TestWsClient::class.java, HttpRequestFactory.INSTANCE.get<String>("/suspending/2")
        ).awaitFirst()
        delay(500)
        suspendingOnOpenCounter.count shouldBe 1
    }

    "opening a websocket should increment the counter - blocking" {
        blockingOnOpenCounter.count shouldBe 0

        // open a websocket
        webSocketClient.connect(
            TestWsClient::class.java, HttpRequestFactory.INSTANCE.get<String>("/blocking/1")
        ).awaitFirst()

        blockingOnOpenCounter.count shouldBe 1
    }


    @MockBean(SuspendingOnOpenCounter::class)
    fun suspendingOnOpenCounter(): OnOpenCounter {
        return SuspendingOnOpenCounter()
    }

    @MockBean(BlockingOnOpenCounter::class)
    fun blockingOnOpenCounter(): OnOpenCounter {
        return BlockingOnOpenCounter()
    }
})


@ClientWebSocket
abstract class TestWsClient : AutoCloseable {
    @OnOpen
    fun onOpen(
        webSocketSession: WebSocketSession,
        request: HttpRequest<*>,
    ) {
        println("opening websocket")
    }

    @OnMessage
    fun onMessage(
        message: String,
        webSocketSession: WebSocketSession,
    ) {
    }

    @OnClose
    fun onClose(
        closeReason: CloseReason,
        webSocketSession: WebSocketSession,
    ) {
    }
}
